/**
 * [ PrintLikeJava_10Times_UsingFor]:  "I like Java "를 10번 출력하기
 *  
 *   o 프로그래밍 스타일 
 *     1) main() 메소드로만 클래스 구성
 *     2) 반복문 사용하여 아주 쉽게 작성하기
 *     
 *   o 작업 반복의 방법
 *     1) 직접 반복 문장을 회수만큼 나열하여 작업 반복함
 *        - 반복된 내용을 직접 하나하나 도장 찍듯이 작성
 *        - 회수가 많아질 경우 정확한 회수만큼 작성하기 어려움
 *        - 회수 변경하기 어려움
 *        - 프로그램 길이가 길어짐
 *      
 *     2) 반복문 이용
 *        - 반복 제어를 위한 문장 이용하여 원하는 만큼 작업 반복시킴
 *        - 반복 회수가 많아져도 프로그램 길어지지 않음
 *        - 프로그램 간결해짐
 *        - 반복 회수의 변경 용이함 
 *         
 *   o 반복문(repetition statement)
 *     - 똑같은 문장들 또는 유사한 문장들이 반복적으로 나열되는 경우 
 *       이를 하나의 문장으로 통합적으로 구성하여 반복시킴
 *     - for 문, while 문, do-while문 등의 반복문      
 *      
 *   o for 문
 *     - 형식
 *         for (반복제어변수_초기화; 반복조건; 제어변수_변경)
 *              반복수행할_문장     
 *    
 *     -기능: 반복 제어변수 이용하여 반복 회수 제어하는 대표적인 반복문
 *     - 구성: 반복 제어변수 초기화, 반복조건 검사, 제어변수 변경, 반복 문장 등 4 부분
 *     - 수행방법: 반복조건이 true인 동안 반복 수행될 문장을 계속 수행
 *     - 반복 제어변수 선언: for 문 외부 또는 내부에서 선언 가능
 *     - for 문 외부에서 선언한 반복 제어변수: for 문 내부와 외부에서 사용 가능하며, 
 *                                       for 문이 종료된 후에도 사용 가능함 
 *     - for 문 내부에서 선언한 반복 제어변수: for 문 내에서만 사용 가능 
 */

class Ex4_3_01_PrintLikeJava_10Times_UsingFor {
	public static void main(String[] args)  {
		System.out.print("\n  ** Print \"I like Java\" 10 times using for statement **\n");

		int i;  // 외부에서 선언된 for 문에서의 반복 제어변수

		for (i = 0; i < 10; i++)               // i가 0부터 10보다 작을 동안 1씩 증가하며 반복
			System.out.print("I like Java ");  //   반복 수행할 문장

		System.out.println("\n\n  * for 문 종료된 후 i = " + i);  // 반복 제어변수 i를 for 문 외부에서 선언했으므로 
		                                                      //   for 문 끝난 후에도 사용가능
	}
}

/*
 * [ 프로그램의 이해 및 실행 ]
 * 
 *   1) 프로그램 실행하여 결과 확인하고 수행과정을 종이에 적어보라.
 *   
 *   2) "I like Java "를 21번 출력하도록 프로그램 변경하고 수행하여 결과 확인하라.
 *  
 *   3) "I like Java "를  121번, 1221번, 12321번 출력하도록 프로그램 변경하고 수행하여 결과 확인하라.
 *         
 * 
 * [ 실습과제 ]
 * 
 *   1) 반복 제어변수를 for 문 내에서 선언할 경우 발생하는 오류를  확인하라.
 * 
 *   2) 출력된 결과에서 회수를 알 수 있도록 작성하면 출력 확인이 용이하다.
 *      "I like Java "를 출력할 때 << 1) I like Java  2) I like Java  3) I like Java ... >>에서와 같이
 *      출력 회수를 앞에 출력하도록 프로그램을 변경하라.      
 *         
 *   3) "I like Java "를 한 라인에 5번만 출력하도록 프로그램 변경하라.
 *      이를 위한 방법은 반복 제어변수 i가 5의 배수이면 반복문 내에서 
 *      << System.out.println();>>을 수행하도록 한다.          
 *  
 *   4) "I like Java "를 77번 출력하는 프로그램을 요구되는 스타일로 작성하라.
 *  
 *      (1) 반복문을 사용하지 않고 한 라인에 "I like Java "를 77번 모두 출력
 *     
 *      (2) 반복문을 사용하지 않고 한 라인에 "I like Java "를 10번씩 출력
 *     
 *      (3) 반복문을 사용하여 한 라인에 "I like Java "를 77번 모두 출력
 *      
 *      (4) 반복문을 사용하여 한 라인에 "I like Java "를 10번씩 출력
 * 
 *      (5) 출력된 결과 확인할 수 있도록 << 1) I like Java  2) I like Java  3) I like Java ... >>에서와 같이 
 *          출력 회수를 앞에 출력하도록 1), 2), 3), 4) 프로그램 변경하라.
 *          
 *          프로그램 변경이 용이한 프로그램이 잘 작성된 프로그램이다. 
 *          
 *          어느 스타일의 프로그램이 변경하기가 쉬운 지를 파악하고 그 이유가 무엇인지 생각해보라.
 *          
 *          
 *  o 스스로 생각하고 고민해볼 과제
 *  
 *    1) 반복문을 사용하지 않고서 작성한 프로그램은 다음과 같다.
 *     
 *     =======================================================================
       class Ex3_4_2_PrintLikeJava_10Times  {
         public static void main(String[] args)  {
		   System.out.print("\n  **** Print \"I like Java\" 10 times using for statement ****\n");

		   // "I like Java " 문자열을 10번 출력
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
		   System.out.print("I like Java ");
	     }
	  }
 *    =======================================================================
 *  
 *  
 *      반복문 미사용 프로그램과 반복문 사용 프로그램을 다음의 관점에서 비교해보라.
 *    
 *       (1) 프로그램 작성의 용이성: 프로그램 작성하는데 얼마나 노력이 필요한가?
 *      
 *       (2) 프로그램 이해성: 작성된 프로그램을 다른 사람이 얼마나 쉽게 이해할 수 있는가?
 *       
 *       (3) 프로그램 변경의 용이성: 반복 회수 변경할 때 얼마나 쉽게 변경할 수 있는가
 *     
 *       (4) 반복문 미사용한 프로그램에서 10번 출력할 것을 11번 출력하는 오류가 있었다.
 *           반복문 사용 프로그램에서도 이러한 오류가 발생할 가능성이 있는가를 검토하라.
 *       
 *   2) 이 프로그램이 "I like Java "를 여러 번 출력하는 프로그램의 완성인 것처럼 보인다. 
 *      for 문 이용하면 아무 것도 아닌 문제가 for 문을 이용하지 않으면 아주 어려운 문제가 된다.
 *    
 *      반복문을 사용하지 않고서 "I like Java "를  1221번 또는 12321번 출력하기 위해 겪었던 
 *      엄청난 수고를 생각하면 약간 화도 날 듯 하지만 반복문의 강력한 파워 느껴보기 바란다.
 *    
 *      별 것도 아닌 것처럼 보이는 문제에 대해 다양한 스타일로 프로그래밍 하게 한 이유는 
 *      주어진 문제에 대한 최선의, 최상의 프로그래밍 스타일을 찾아야 하기 때문이다. 
 *      
 *      최종적으로는 가장 좋은 스타일의 프로그램 하나만 잘 작성하면 문제는 해결된다. 
 *      그렇지만 프로그래밍 배우고 연습하는 과정에서는 다양한 스타일을 시도하는 것이 필요하고,
 *      그러는 가운데 자기도 모르게 여러 프로그래밍 스타일을 익히게 되고, 
 *      자연히 좋은 스타일과 나쁜 스타일에 대한 평가 능력이 생기게 된다.
 *    
 *      그리고 가끔은 나쁜 스타일로 프로그래밍을 작성해보는 것도 큰 도움이 된다. 
 *      작성이 불가능해 보일 때에도 끝까지 한번 작성해보려고 노력하면 전혀 생각하지도 못했던
 *      새로운 방법이 "짜잔" 하고 나타날 수도 있다. 
 *    
 *      "I like Java " 여러 번 출력하는 문제의 대미를 장식하기 위해 창의적 도전과제를 하나 주겠다.
 *      출력회수를 입력하여 "I like Java "를 입력된 회수만큼 출력하는 프로그램을 반복문이나 재귀 메소드를 
 *      사용하지 않고 출력하는 프로그램을 작성할 수 있으면 해보기 바란다. 
 *       
 *      이것은 다른 동료학생과 함께 해도 되고, 선배나 전문가에게 문의를 해서 답을 구해도 좋다. 
 */

/**
 * [ CountDivisors_UsingFor ]: 중첩된 for 문 사용하여 1부터 100까지 정수 약수 개수 출력하기   
 *            
 *   o 중첩된 for 문
 *     - for 문 내에 또다시 for 문 나타남
 *     - 2개 이상의 반복 제어변수가 사용되어 반복 회수 많아지면 작업 복잡해짐 
 *     
 *     - 중첩 유형
 *       (1) 내부 반복문에서 외부 반복 제어변수 사용하지 않는 경우
 *           내부 반복문이 외부 반복문에 영향받지 않고 수행, 덜 복잡 
 *            
 *       (2) 내부 반복문에서 외부 반복 제어변수 사용하는 경우
 *           내부 반복문이 외부 반복문에 영향받으면서 수행, 다소 복잡함
 *
 *   o 약수
 *     - 양의 정수 n의 약수는 1과 n 사이의 정수 중 n을 나머지 없이 나누는 수
 *     - 6의 약수: 1, 2, 3, 6
 *     - 12의 약수: 1, 2, 3, 4, 6, 12   
 *      
 */

class Ex4_3_08_CountDivisors_UsingFor {
	public static void main(String[] args)  {
		System.out.println("\n  ** 1부터 100까지의 정수에 대해 약수 개수 출력하기 **\n  ");

		for (int n = 1; n <= 100; n++) {  	// 외부 for 문: n이 1부터 100까지 100번 반복
			int cntDivisors = 0;            //    n의 약수 개수를 0으로 초기화
			
			for (int i = 1; i <= n; i++) {  //    내부 for 문: i가 1부터 n까지 반복(외부 반복제어변수 n 사용하므로 처리 복잡)
				if (n % i == 0)     		//       n을 i로 나누어 나머지가 0이면 
					cntDivisors++;  		//       i는 n의 약수이므로 약수 개수 1 증가
//				System.out.print(" " + i);
			}
			
			System.out.println("  * " + n +  "의 약수 개수: " + cntDivisors);  
		}
	}
}

/*
 * [ 프로그램의 이해 및 실행 ]
 *   
 *   1) 이 프로그램은 외부 for 문은 n이 1부터 100까지 100번 수행
 *   
 *   2) 내부 for 문은 i가 1부터 n까지 n번 수행됨
 *      - n = 1일 때 1번: i = 1  (i <= 1이면 반복) 
 *      - n = 2일 때 2번: i = 1, 2 (i <= 2 이면 반복)
 *      - n = 3일 때 3번: i = 1, 2, 3 (i <= 3이면 반복)
 *        …
 *      - n = 100일 때 100번: i = 1, 2, 3, …, 100 (i <= 100이면 반복)   
 *     
 *   3) 총 반복회수 구하면 1 + 2 + 3 + ... + 99 + 100 = 5050번임
 *   
 *   
 * [ 실습 과제 ]
 *   
 *   1) 10000부터 11000 사이 정수의 약수 개수 출력하도록 프로그램 변경하라.
 *   
 *   2) 1000000000부터 1000000100 사이 정수의 약수 개수 출력하도록 프로그램 변경하라.
 *   
 *      결과가 출력되기까지 걸리는 시간이 오래 걸리는 이유에 대해 생각해보라.
 *      또한 약수 개수를 빠르게 구할 수 있는 방법이 있는지 조사하라.
 *      
 *   3) 10000부터 11000 사이 정수 중에서 약수 개수 2개인 정수 출력하도록 프로그램 변경하라.
 *   
 *   4) 외부 for 문에 << System.out.print(" n = " + n + "일 때 i ="); >>을 추가하고
 *      내부 for 문에<< System.out.print((" " + i); >>를 추가하여 반복 제어변수 n과 i를 
 *      출력하도록 프로그램을 변경한 후 실행하여 결과 확인하라.
 *      
 *      외부 제어변수 n에 따라 달라지는 내부 for 문의 제어변수 i 값을 확인하라.
 *   
 *   5) 다음과 같은 '*'로 밑변의 크기가 5인 직각삼각형을 그리는 프로그램을 다음의 2가지 방법으로 작성하라.
 *         *
 *         **
 *         ***
 *         ****
 *         *****
 *       
 *      (1) Pr4_3_08_PrintTriangle_NotUsingNestedFor 클래스
 *          System.out.println()을 이용하여 "*", "**", "***", "****", "*****"을 
 *          한 라인씩 직접 5번 그리는 프로그램
 *        
 *      (2) Pr4_3_08_PrintTriangle_UsingNestedFor 클래스
 *          예제 프로그램과 같이 중첩된 for 문 이용하여 직각 삼각형 그리는 프로그램 
 *          
 *   6) 다음과 같은 '*'로 밑변의 크기가 5인 직각삼각형을 그리는 프로그램을 다음의 2가지 방법으로 작성하라.
 *             *
 *            **
 *           ***
 *          ****
 *         *****
 *           
 *      (1) Pr4_3_08_PrintTriangle2_NotUsingNestedFor 클래스
 *          System.out.println()을 이용하여 "    *", "   **", "  ***", " ****", "*****"을 
 *          한 라인씩 직접 5번 그리는 프로그램
 *        
 *      (2) Pr4_3_08_PrintTriangle2_UsingNestedFor 클래스
 *          예제 프로그램과 같이 중첩된 for 문 이용하여 직각 삼각형 그리는 프로그램   
 *          
 *          이를 위해서 공백문자(' ')를 첫 라인은 4개, 두 번째 라인은 3개, 세 번째 라인은 2개, 네 번째 라인은 1개, 
 *          다섯 번째 라인은 0개를  출력한 후 각 라인에 맞는 개수의 '*' 출력해야 한다.    
 */

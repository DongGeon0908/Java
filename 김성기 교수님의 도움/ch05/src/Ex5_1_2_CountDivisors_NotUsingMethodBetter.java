/**
 * [ CountDivisors_NotUsingMethodBetter ]: 100의 약수 개수와 1237의 소수 여부 출력(메소드 미사용)   
 *            
 *   o 프로그래밍 스타일 
 *     - main() 메소드에서 모든 작업을 수행
 *     - 100의 약수 개수와 1237의 소수 여부 출력을 메소드 사용 않고서 작성
 *     
 *     - main() 메소드를 2개의 블록으로 나누어 작업을 명확히 분리함
 *     - 이전 프로그램에 여러번 나타난 상수 100과 1237을 변수에 저장하므로 이전에 비해 변경이 훨씬 용이함     
 *       
 *   o 메소드 사용하지 않은 프로그램의 문제점
 *     - 기능을 파악하기 위해서는 프로그램을 잘 살펴보아야 함
 *     - 유사한 작업 수행 시 프로그램에서 중복된 부분이 있음
 *       
 *   o 약수(divisor)와 소수(prime number)
 *     - 약수: 양의 정수 n의 약수는 1과 n 사이의 정수 중 n을 나머지 없이 나누는 수
 *     - 6의 약수: 1, 2, 3, 6
 *     - 12의 약수: 1, 2, 3, 4, 6, 12   
 *     - 약수가 2개인 정수: 2, 3, 5, 7, 11, 13, 17, ...       
 *     - 소수: 약수의 개수가 2개인 양의 정수               
 */  

class Ex5_1_2_CountDivisors_NotUsingMethodBetter {
	public static void main(String[] args)  {
		
		{
			int n = 100;				    // 약수 개수 구할 정수: 100
			
			int cntDivisors = 0;            // n의 약수 개수를 0으로 초기화			
			 
			for (int i = 1; i <= n; i++) 	// for 문: i가 1부터 n까지 반복
				if (n % i == 0) 			//    n을 i로 나누어 나머지가 0이면 
					cntDivisors++; 			//    i는 n1의 약수이므로 약수 개수 1 증가	

			System.out.println("\n  * " + n + "의 약수 개수: " + cntDivisors); 
		}

		{
			int n = 1237; 					// 소수 여부 판단할 정수: 1237
			
			int cntDivisors = 0;            // n의 약수 개수를 0으로 초기화			
			
			for (int i = 1; i <= n; i++)   	// for 문: i가 1부터 n까지 반복
				if (n % i == 0) 	    	//    n을 i로 나누어 나머지가 0이면 
					cntDivisors++;          //    i는 n의 약수이므로 약수 개수 1 증가	

			if (cntDivisors == 2) 
				System.out.println("\n  * " + n  + ": 소수임" ); 
			else 
				System.out.println("  \n  * " + n + ": 소수 아님" ); 
		}
	}
}

/*
 * [ 프로그램의 이해 및 실행 ]
 *   
 *   1) 이 프로그램은 for 문을 이용하여 100의 약수 개수와 1237의 소수 여부 출력한다.
 *  
 *   2) main() 메소드를 2개의 블록으로 재구성하여 2가지 작업을 명확히 분리한다.
 *  
 *   3) 프로그램을 실행하여 결과를 확인하라.
 *     
 *   4) 프로그램이 수행하는 작업내용을 기능이라 하는데, 프로그램의 기능이 바로 파악되는가?
 *  
 *  
 * [ 실습 과제 ]
 *  
 *   1) 10000의 약수 개수 출력하기 위한 코드를 추가로 작성하라.
 *    
 *   2) 1234567의 소수 여부 출력하기 위한 코드를 추가로 작성하라.
 *    
 *   3) 이 프로그램은 다음과 같은 문제점이 있음을 이해하도록 노력하라.
 *      (1) 다른 정수에 대해 약수 개수나 소수 여부를 추가로 출력하기 위해 추가되는 코드의 양이 많다.
 *      (2) 추가된 코드가 기존의 코드와 아주 비슷하며, 프로그램 기능 파악이 여전히 쉽지 않다.     
 */

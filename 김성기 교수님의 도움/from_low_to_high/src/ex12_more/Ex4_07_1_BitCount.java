package ex12_more;
/*
 * [ BitCount ]: 양의 정수를 입력하여 그 정수의 1인 비트수를 나머지 연산으로 구하기
 * 
 *    o 프로그래밍 스타일 
 *      1) main() 메소드로만 클래스 구성
 *      2) 반복문 사용하지 않기
 *         - 1인 비트 개수를 최대 31까지 구함
 *         - 입력된 정수의 가장 오른쪽 비트에 대해 0, 1을 검사하고 정수를 2로 나누어 반복 
 *   
 *    o 1인 비트수를 구하는 방법:
 *      - 입력된 정수를 2로 나눈 나머지가 1이면 그 정수의 가장 오른쪽 비트는 1임
 *        이를 이용하여 2로 나눈 나머지를 구하여 1인지 확인함
 *         
 *      - 그 정수를 2로 나눈 몫을 구하여 그 몫에 대해 똑같은 작업을 하면
 *        바로 다음 왼쪽의 비트에 대해서도 1인지를 확인할 수 있음
 */

class Ex4_07_1_BitCount  {
	public static void main(String[] args)  {
		int n, n0;         // 입력된 값을 저장할 변수

		System.out.println("\n\n   ****  Getting count of 1 bits of an integer ****");
		n0 = n = SkScanner.getIntWithPrompt("\n  o Enter a positive number less than or equal to "+ 0x7FFFFFFF + " > ");

		int cnt = 0;   // 1인 비트의 개수를 저장할 변수
		
		if ((n % 2) == 1) cnt++;  // 오른쪽 1번째 비트가 1이면 2로 나눈 나머지가 1임, 이때 cnt 1 증가
		n = n / 2;                //   n을 2로 나누면 n이 오른쪽으로 한자리 이동하는 효과임		
		if ((n % 2) == 1) cnt++;  // 오른쪽 2번째 비트가 1이면 2로 나눈 나머지가 1임, 이때 cnt 1 증가
		n = n / 2;                //   n을 2로 나누면 n이 오른쪽으로 한자리 이동하는 효과임		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  // 5번째 비트 확인
		n = n / 2;                		

		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  // 10번째 비트 확인
		n = n / 2;                		

		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  // 15번째 비트 확인
		n = n / 2;                		

		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  // 20번째 비트 확인
		n = n / 2;                		
		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  // 25번째 비트 확인
		n = n / 2;                		

		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  
		n = n / 2;                		
		if ((n % 2) == 1) cnt++;  // 30번째 비트 확인
		n = n / 2;                		
		
		if ((n % 2) == 1) cnt++;  // 31번째 비트 확인
		n = n / 2;                		

		System.out.println("\n  * Count of 1 bits of " + n0 + " is " + cnt);

		main(args);   // 이는 가장 쉽게 전체를 반복시키는 방법임
	}
}

/*
 *  [ 프로그램의 이해 및 실행 ]
 *   
 *    1) 주어진 프로그램을 살펴보고 프로그램의 내용를 파악하라.     
 *     
 *    2) 정수 1, 2, 127, 255, 65535, 16777215, 2147483647을 입력하여 결과를 확인하라
 * 
 * 
 *  [ 스스로 생각하고 고민해볼 과제 ]
 * 
 *    o 이 프로그램은 입력 정수에 대해 2의 나머지가 1인가를 검사하고 다시 2로 나눈 몫에 대해 
 *      동일한 작업을 수행하는 완전히 동일한 31개의 if 문과 n = n/2 문장으로 구성된다.
 *      
 *      1인 비트수를 구하는 방법을 알면 프로그램 작성은 아주 쉽다. 
 *      그러나 프로그램의 길이가 길고 80여 라인이나 되어 매우 길다.
 *        
 *    o 똑같은 내용이 반복되거나 유사한 내용이 반복될 경우 반복문으로 작성해야 한다. 
 *      이 프로그램을 for 문으로 변경한 프로그램을 스스로 작성해보라.
 *     
 *    o 아주 간결한 프로그램인 Ex4_7_2_BitCount_UsingFor과 결과를 비교해보라.      
 *      또한 더 개선된 프로그램이 Ex4_7_3_BitCount_Usingwhile인데, 이와도 비교해보라.
 *      
 */
package ex12_more;
/*
 * [ BitCount_UsingWhile ]: 양의 정수를 입력하여 그 정수의 1인 비트수를 나머지 연산으로 구하기
 *   
 *    o 프로그래밍 스타일 
 *      1) main() 메소드로만 클래스 구성
 *      2) 반복문 중 while 문 사용하기
 *         - 1인 비트 개수를 최대 31까지 구함
 *         - 입력된 정수를 계속 2로 나누면서 가장 오른쪽 비트에 대해 0, 1을 검사
 *         - 2로 나눈 정수가 0이 되면 반복을 종료함
 *               
 *      o 1인 비트수를 구하는 방법:
 *        - 입력된 정수를 2로 나눈 나머지가 1이면 그 정수의 가장 오른쪽 비트는 1임
 *          이를 이용하여 2로 나눈 나머지를 구하여 1인지 확인함
 *         
 *        - 그 정수를 2로 나눈 몫을 구하여 그 몫에 대해 똑같은 작업을 하면
 *          바로 다음 왼쪽의 비트에 대해서도 1인지를 확인할 수 있음
 *        
 *        - 정수를 계속 2로 나누어 몫을 반복하여 저장하면 어느 순간 0이 되므로 
 *          더 이상 1인 비트를 검사할 필요가 없어짐
 *          이를 이용하여 가장 효율적으로 작성한 프로그램이 이 프로그램임
    
 */

class Ex4_07_3_BitCount_UsingWhile  {
	public static void main(String[] args)  {
		int n0, n;     // 입력된 값을 저장할 변수		

		System.out.println("\n\n   ****  Getting count of 1 bits of an integer (using while stmt) ****");
		n0 = n = SkScanner.getIntWithPrompt("\n  o Enter a positive number > ");

		int cnt = 0;   // 1인 비트의 개수를 저장할 변수

		while (n != 0) {   // n에 대해 계속 2로 나누면 어느 순간 n이 0이 되며, 이 경우 더 이상 1인 bit가 없음
			if (n % 2 == 1) cnt++;  // n을 2로 나눈 나머지가 1이면 cnt 증가 
			
			// 이 문장은 프로그램 개발과정에서 확인을 위해 작성한 코드임
			System.out.println("    << for debug >> n = " + n + ", cnt = " + cnt);  

			n = n / 2;              // n을 2로 나눈 몫으로 대체한 후 다시 반복
		}

		System.out.println("\n  * Count of 1 bits of " + n0 + " is " + cnt);

		main(args);   // 이는 가장 쉽게 전체를 반복시키는 방법임
	}
}

/*
 * [ 프로그램의 이해 및 실행 ]
 *   
 *   1) 주어진 프로그램을 살펴보고 프로그램의 내용를 파악하라.     
 *     
 *   2) 점수 1, 2, 127, 255, 65535, 16777215, 2147483647을 입력하여 결과를 확인하라
 *   
 *   3) 개발 과정에서 확인을 위해 작성한 코드의 출력 결과를 살펴보라. 특히 cnt가
 *      1 증가했을 때의 n이 짝수인지 홀수인지를 확인하라.  
 *      
 *   4) 이 프로그램을 반복문으로 작성하지 않고 반복되는 문장들을 일일이 작성한 
 *      프로그램이 BitCount 클래스이다. 두 프로그램을 비교하여 보라.
 * 
 *      
 * [ 실습과제 ]
 *    
 *   o 이 프로그램을 조금만 변형하면 1인 비트의 개수뿐만 아니라 주어진 정수의 비트 패턴을 구하여
 *     출력하는 프로그램으로 쉽게 바꿀 수 있다. 
 *    
 *     입력된 정수의 비트 개수와 비트 패턴을 출력하는 Pr4_7_2_BitPattern_UsingWhile을
 *     작성하라. (예를 들어, 7의 비트 패턴은 111이며, 17의 비트 패턴은 10001이다)
 *     
 *     (참고: 이를 위하여 비트 패턴을 저장할 변수를 << String bitPattern =""; >>으로 선언하고
 *            while 문 내에서 n % 2가 1이면 < bitPattern = "1" + bitPattern; >, 
 *            n % 2가 0이면 << bitPattern = "0" + bitPattern; >>을 수행한다.)
 * 
 * 
 * [ 스스로 생각하고 고민해볼 과제 ]
 * 
 *   o 이 프로그램은 입력된 정수에서 1인 비트수를 출력하는 가장 좋은 스타일의 프로그램이다.
 *     이는 주어진 문제에 대한 가장 깔끔하고 잘 작성된 최상의 프로그램이라는 것이다.
 *     (함수를 사용하면 더 좋은 스타일의 프로그램이 작성 가능하지만, 배우지 않은 것은 고려하지 않음)
 *     
 *     이 프로그램이 가장 좋은 스타일의 프로그램인 이유를 생각해보라.
 */
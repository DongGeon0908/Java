package ex12_more;
/*
*   [ BitCount_UsingWile ]:  양의 정수를 입력하여 그 정수의 각 자리수의 합을 구하기
 *   
 *      o 스타일 2: 반복문 사용하기
 *                + 각 자릿수를 while 문을 이용하여 구하여 합함
 *                + 입력된 수의 10의 나머지를 구하고 10으로 나눈 몫에 대해 반복함
 *                
 *      o 각 자리수의 합 구하기
 *        - 12345인 경우 자리수는 1의 자리 1, 10의 자리 2, 백의 자리 3이므로 자리수 합은 1+2+3 = 6임
 *        - 입력된 정수를 10으로 나눈 나머지가 1 자리의 자리수임
 *        - 이를 이용하여 10으로 나눈 나머지를 구하여 1 자리의 자리수를 확인하고, 
 *        - 그 정수를 10으로 나눈 몫을 구하여 그 몫에 대해 똑같은 작업을 하면
 *          바로 다음 왼쪽 자리의 자리수를 확인할 수 있음
 *        - int 타입의 양의 정수의 최대 자리수는 10자리이므로 10번 반복하면 됨
 *        
 *      o 정수를 계속 10으로 나눈 몫을 반복하여 구하여 저장하면 어느 순간 0이 되므로 
 *        더 이상 자리수를 확인할 필요가 없어짐
 *        이를 이용하여 가장 효율적인 프로그램을 작성한 프로그램이 이 프로그램임
    
 */

class Ex4_06_2_SumDigits_UsingWhile  {
	public static void main(String[] args)  {
		int n0, n;     // 입력된 값을 저장할 변수		
		int sum = 0;   // 각 자리수의 합을 저장할 변수

		System.out.println("\n\n  **** Getting sum of digits of an integer (using while statement) ****");

		n0 = n = SkScanner.getIntWithPrompt("\n  o Enter a positive number > ");

		while (n != 0)  {
			int digit = n % 10; 	// 1의 자리의 자리수를 구함
			System.out.println("  << 개발과정에서의 확인>> sum = " + sum + ", n = " + n + ", digit = " + digit + ", next n = " + n / 10);
			
			sum += digit;  			// n을 10으로 나눈 나머지를 sum에 누적시킴
			n = n / 10;       		// n을 10으로 나눈 정수 몫으로 대체한 후 다시 반복
		}
		
		System.out.println("\n  * sum of digits of " + n0 + " is " + sum);

		main(args);   // 이는 가장 쉽게 전체를 반복시키는 방법임
	}
}

/*
 * [ 프로그램의 이해 및 실행 ]
 *   
 *   1) 주어진 프로그램을 살펴보고 프로그램의 내용를 파악하라.     
 *     
 *   2) 점수 1, 2, 127, 255, 65535, 16777215, 2147483647을 입력하여 결과를 확인하라

 * 
 *      
 * [ 실습과제 ]
 * 
 *     이 프로그램은 입력된 정수에서 1인 비트수를 출력하는 가장 좋은 프로그램이다.
 *    
 *     이를 조금만 변형하면 1인 비트의 개수뿐만 아니라 주어진 정수의 비트 패턴을 구하여
 *     출력하는 프로그램으로 쉽게 바꿀 수 있다. 
 *    
 *     입력된 정수의 비트 개수와 비트 패턴을 출력하는 Pr4_6_2_BitPattern_UsingWhile을
 *     작성하라.(에를 들어 7의 비트 패턴은 111이며, 17의 비트 패턴은 10001이다)
 *     
 *     (참고: 이를 위하여 비트 패턴을 저장할 변수를 < String bitPattern =""; >으로 선언하고
 *            while 문 내에서 n % 2가 1이면 < bitPattern = "1" + bitPattern; >, 
 *            n % 2가 0이면 < bitPattern = "0" + bitPattern; >을 수행한다.)
 * 
 * [ 스스로 생각하고 고민해볼 과제 ]
 *      이 프로그램이 주어진 문제에 대한 가장 깔끔하고 잘 작성된 최상의 프로그램이다.
 *      그 이유가 무엇인가를 생각해보라.
 */